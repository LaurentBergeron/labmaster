"""
LabMaster launcher.
Type 'run launch.ipy' in a Ipython console.
Be aware that this command will close instrument drivers and reset the Ipython environnement.
"""


import os, glob
## clean existing .pyc files (don't worry they will come back!)
for filename in glob.glob("*.pyc")+glob.glob("exp/*.pyc")+glob.glob("mod/*.pyc"):
    os.remove(filename)

os.system("attrib +H *.pyc /S")  # ---> hide .pyc files in directory
# os.system("attrib -H *.pyc /S")  # ---> to view .pyc again


## Safe start calls the close_all method of every Lab instance in Ipython's namespace.
from mod.main import clean_reset
clean_reset(globals())

## Message when it's not first launch.
try:
    __LABMASTER__
    print('Ipython environnement reset.')
except:
    print('Start by connecting to instruments using lab.add_instrument(). Happy science!')

## Reset Ipython environnement
%reset -f
%reload_ext autoreload
%autoreload 2

## Import LabMaster
from mod.main import *

__LABMASTER__ = True


plt.ion() ## interactive matplotlib ON
plt.close("all") ## close matplotlib figures

## Disable annoying matplotlib warning for deprecated pause() function.
import warnings
import matplotlib.cbook
warnings.filterwarnings("ignore",category=matplotlib.cbook.mplDeprecation)

## Make some Ipython magic
from IPython.core.magic import register_line_magic
@register_line_magic
def irun(line):
    """Interactive run combined with autoreload."""
    get_ipython().run_line_magic('autoreload', '')
    get_ipython().run_line_magic('run', ' -i ' + line)
    return
del irun


## Initialize this lab instance.
lab = Lab()


### Auto completion for instrument strings (awg='awg', etc.)
for name in available_instruments.__dict__.keys():
    if not name.startswith("_"):
        exec(name+"='"+name+"'")
